/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RedirectImport } from './routes/redirect'
import { Route as DeferredImport } from './routes/deferred'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as ArticlesRouteImport } from './routes/articles/route'
import { Route as IndexImport } from './routes/index'
import { Route as ArticlesIndexImport } from './routes/articles/index'
import { Route as ArticlesPostIdImport } from './routes/articles/$postId'

// Create/Update Routes

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const DeferredRoute = DeferredImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const ArticlesRouteRoute = ArticlesRouteImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ArticlesIndexRoute = ArticlesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ArticlesRouteRoute,
} as any)

const ArticlesPostIdRoute = ArticlesPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => ArticlesRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/articles': {
      id: '/articles'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof ArticlesRouteImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/articles/$postId': {
      id: '/articles/$postId'
      path: '/$postId'
      fullPath: '/articles/$postId'
      preLoaderRoute: typeof ArticlesPostIdImport
      parentRoute: typeof ArticlesRouteImport
    }
    '/articles/': {
      id: '/articles/'
      path: '/'
      fullPath: '/articles/'
      preLoaderRoute: typeof ArticlesIndexImport
      parentRoute: typeof ArticlesRouteImport
    }
  }
}

// Create and export the route tree

interface ArticlesRouteRouteChildren {
  ArticlesPostIdRoute: typeof ArticlesPostIdRoute
  ArticlesIndexRoute: typeof ArticlesIndexRoute
}

const ArticlesRouteRouteChildren: ArticlesRouteRouteChildren = {
  ArticlesPostIdRoute: ArticlesPostIdRoute,
  ArticlesIndexRoute: ArticlesIndexRoute,
}

const ArticlesRouteRouteWithChildren = ArticlesRouteRoute._addFileChildren(
  ArticlesRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/articles': typeof ArticlesRouteRouteWithChildren
  '': typeof PathlessLayoutRoute
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/articles/$postId': typeof ArticlesPostIdRoute
  '/articles/': typeof ArticlesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutRoute
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/articles/$postId': typeof ArticlesPostIdRoute
  '/articles': typeof ArticlesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/articles': typeof ArticlesRouteRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRoute
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/articles/$postId': typeof ArticlesPostIdRoute
  '/articles/': typeof ArticlesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/articles'
    | ''
    | '/deferred'
    | '/redirect'
    | '/articles/$postId'
    | '/articles/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/deferred' | '/redirect' | '/articles/$postId' | '/articles'
  id:
    | '__root__'
    | '/'
    | '/articles'
    | '/_pathlessLayout'
    | '/deferred'
    | '/redirect'
    | '/articles/$postId'
    | '/articles/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ArticlesRouteRoute: typeof ArticlesRouteRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRoute
  DeferredRoute: typeof DeferredRoute
  RedirectRoute: typeof RedirectRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ArticlesRouteRoute: ArticlesRouteRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRoute,
  DeferredRoute: DeferredRoute,
  RedirectRoute: RedirectRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/articles",
        "/_pathlessLayout",
        "/deferred",
        "/redirect"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/articles": {
      "filePath": "articles/route.tsx",
      "children": [
        "/articles/$postId",
        "/articles/"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx"
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/articles/$postId": {
      "filePath": "articles/$postId.tsx",
      "parent": "/articles"
    },
    "/articles/": {
      "filePath": "articles/index.tsx",
      "parent": "/articles"
    }
  }
}
ROUTE_MANIFEST_END */
